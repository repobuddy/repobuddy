---
description: when genrating commit message
alwaysApply: false
---
# Commit Message Guidelines

Commit messages in this repository must follow the Conventional Commits specification.

This rule should be used when generating commit messages.

## Related Rules

This rule works in conjunction with:

- **[Cursor Rules Guidelines](mdc:.cursor/rules/agents/cursor_rules.mdc)**: For rule structure and formatting standards
- **[Markdown Guidelines](mdc:.cursor/rules/guidelines/markdown.mdc)**: For content formatting and link syntax

## Commit Types (with Examples)

| Type       | Description                                               | Example                                          |
| ---------- | --------------------------------------------------------- | ------------------------------------------------ |
| `feat`     | New features or enhancements                              | `feat(auth): add JWT authentication`             |
| `fix`      | Bug fixes and error corrections                           | `fix(ui): resolve button hover state`            |
| `docs`     | Documentation changes                                     | `docs(api): update endpoint documentation`       |
| `style`    | Code style changes (formatting, missing semicolons, etc.) | `style: format code with prettier`               |
| `refactor` | Code refactoring (no functional changes)                  | `refactor(utils): simplify helper functions`     |
| `test`     | Adding or updating tests                                  | `test(component): add unit tests for Button`     |
| `chore`    | Build process, tooling, or configuration changes          | `chore(rules): update commit message guidelines` |
| `perf`     | Performance improvements                                  | `perf(query): optimize database queries`         |

- Use scope in parentheses when helpful (e.g., `fix(auth)`, `chore(rules)`).
- Use imperative mood, lowercase, and no period at the end of the description.

## Commit Message Format & Process

1. **Check for staged changes first** (`git status --porcelain`). If staged changes exist, use `git diff --cached` for the commit message. Only check unstaged changes if there are no staged changes.
2. **Write your commit message in this format:**

   ```text
   <type>[optional scope]: <description>

   [optional body]

   [optional footer(s)]
   ```

   - The body is optional and should be separated by a blank line.
   - The footer is optional (for breaking changes or issue references).
   - **Breaking changes**: Include `BREAKING CHANGE:` in the body and explain migration steps.

## Examples

```text
fix(component): resolve button hover state not working in dark mode
```

```text
feat(api): add user authentication endpoint

Implements JWT-based authentication for user login with proper error handling and validation.

BREAKING CHANGE: The login endpoint now requires a password field.
```

```text
chore: update TypeScript configuration for stricter type checking
```

## Special Cases & Tips

- Use `chore(rules)` for changes only in `.cursor/rules`.
- For config/build/dependency changes, use `chore` (optionally with a scope).
- For multiple unrelated changes, split into multiple commits or use a general `chore`.

## Quality Checklist

- [ ] Follows Conventional Commits specification.
- [ ] Uses appropriate type and (optional) scope.
- [ ] Description is clear, imperative, and has no period at the end.
- [ ] Body and footer included if needed, with proper blank line spacing.
- [ ] Staged changes take priority over unstaged changes.
