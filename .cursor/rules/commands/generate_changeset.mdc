
# Generate Changeset

Step-by-step commands for creating changesets files.

## Required Rules

The AI agent should read and follow these rules along with the subject rule:

- **[Markdown Guidelines](mdc:.cursor/rules/guidelines/markdown.mdc)**: For proper markdown formatting in changeset files that must be followed
- **[Repository Structure](mdc:.cursor/rules/project/repository_structure.mdc)**: For the structure of the repository and the packages inside it

## Quick Reference

| Step          | Command                         | Purpose                 |
| ------------- | ------------------------------- | ----------------------- |
| Check scope   | `git status --porcelain`        | Identify changed files  |
| Find packages | `git diff --cached --name-only` | Map files to packages   |
| Validate      | `pnpm cs validate`              | Check changeset format  |
| Status        | `pnpm cs status`                | View pending changesets |

## Table of Contents

- [Changeset Naming](mdc:#changeset-naming)
- [Step-by-Step Process](mdc:#step-by-step-process)
  - [1. Identify Scope](mdc:#1-identify-scope)
  - [2. Identify Affected Packages](mdc:#2-identify-affected-packages)
  - [3. Determine Change Type](mdc:#3-determine-change-type)
  - [4. Create the Changeset](mdc:#4-create-the-changeset)
- [Changeset File Format](mdc:#changeset-file-format)
  - [Frontmatter Rules](mdc:#frontmatter-rules)
- [Validation Steps](mdc:#validation-steps)
  - [Pre-Creation Validation](mdc:#pre-creation-validation)
  - [Post-Creation Validation](mdc:#post-creation-validation)
- [Quality Checklist](mdc:#quality-checklist)

## Changeset Naming

Use short descriptions in `kebab-case`:

```text
[description].md
```

## Step-by-Step Process

### 1. Identify Scope

- If there are staged changes, the changeset will be based on the staged changes.
- If there are no staged changes but there are unstaged changes, the changeset will be based on the unstaged changes.
- If there are no staged changes and no unstaged changes, the changeset will be based on the current branch compared to the main branch.

### 2. Identify Affected Packages

Determine which package is affected based on the location of the changed files:

- **If there are staged changes**: Use `git diff --cached --name-only` to see staged files
- **If there are no staged changes**: Use `git status --porcelain` to see unstaged files

Refer to the [Repository Structure](mdc:.cursor/rules/project/repository_structure.mdc) for the list of packages and their locations.

**Note**: If the changes do not affect any package (e.g., only documentation, CI/CD, or tooling files outside packages), no changeset file should be created. If you add root-level packages or scripts in the future, specify how to handle those here.

### 3. Determine Change Type

| Type      | Version Bump      | When to Use                         |
| --------- | ----------------- | ----------------------------------- |
| **major** | `1.0.0` → `2.0.0` | Breaking changes, API changes       |
| **minor** | `1.0.0` → `1.1.0` | New features, new exports           |
| **patch** | `1.0.0` → `1.0.1` | Bug fixes, performance improvements |

### 4. Create the Changeset

Create manually: `[description].md` in `.changeset/`

## Changeset File Format

```md
---
"[package-name]": [version-type]
---

Brief description of the changes.

More detailed explanation if needed.

BREAKING CHANGE: Description of breaking changes if any.
```

### Frontmatter Rules

- **Package names**: Use exact package names from `package.json`
- **Version types**: `major`, `minor`, or `patch`
- **Multiple packages**: List all affected packages
- **Important**: **Package names must match exactly as in `package.json` (including scope, if any).**

## Validation Steps

### Pre-Creation Validation

1. **Check if changeset is needed**:
   - Does the change affect public APIs?
   - Is it a user-facing change?
   - Will it require a version bump?

2. **Identify affected packages**:
   - Review `git status --porcelain`
   - Check package.json files for correct names

3. **Determine version type**:
   - Major: Breaking changes
   - Minor: New features
   - Patch: Bug fixes

## Quality Checklist

Before creating a changeset, ensure:

- [ ] Changes affect public APIs or user-facing functionality
- [ ] Correct packages are listed in frontmatter
- [ ] Appropriate version type is selected
- [ ] Description is clear and concise
- [ ] Breaking changes are documented
- [ ] Changeset filename follows naming conventions
- [ ] Package names match `package.json` exactly
