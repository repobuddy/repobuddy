---
description: When creating or updating files and folders
alwaysApply: false
---
# Naming Guidelines

This rule establishes consistent naming conventions for files and folders throughout the repository.

## File Naming Rules

All file names must use snake_case format.

### Examples by File Type

**Components**: `button.tsx`, `loading_button.tsx`, `user_profile.tsx`
**Test files**: `button.spec.ts`, `user_profile.test.ts`, `api_endpoint.spec.ts`
**Stories**: `button.stories.tsx`, `user_profile.stories.tsx`
**Utilities**: `format_date.ts`, `api_client.ts`, `validation_utils.ts`
**Types**: `user_types.d.ts`, `api_types.d.ts`

## Folder Naming Rules

All folders should use snake_case format.

Examples: `button/`, `loading_button/`, `tab_panel/`, `utils/`, `testing/`

## Special Cases and Exceptions

### Framework or Ecosystem Specific Naming Conventions

Some frameworks or ecosystems have specific naming conventions that do not follow the `snake_case` rule.

For example,

- `.markdownlint-cli2.jsonc`
- `pnpm-workspace.yaml`
- `commitlint.config.js`
- `next.config.js`
- `tailwind.config.js`

Honor the ecosystem's naming conventions for these cases.

### Artifacts Folders

Artifacts folders are ignored from naming conventions.
These directories use their standard names as required by build tools.
Examples: `cjs/`, `esm/`, `dist/`, `build/`, `coverage/`
Files and folders within these directories are generated and should not be manually named.

### Package Names

Package names in `package.json` can use `kebab-case` as per npm conventions.

Examples: `just-web`, `storybook-addon-vis`

### Index Files

Index files should be named `index.ts` or `index.tsx` as appropriate for their content type.

### Files with Numbers or Versions

When files contain numbers or versions, use snake_case:

- `api_v2.ts` (not `api-v2.ts`)
- `user_v1_types.d.ts`
- `migration_2024_01.ts`

## Migration Guidelines

### When Creating New Files

1. Always use `snake_case` for new file names.
2. Always use `snake_case` for new folder names (including component folders).
3. Follow the established patterns in the directory you're working in.
4. Use appropriate file extensions (`.ts`, `.tsx`, `.spec.ts`, etc.).

### When Refactoring Existing Files

1. Gradually migrate existing files to `snake_case`.
2. Update imports and references accordingly.
3. Maintain backward compatibility during transition.
4. Update any documentation that references the old file names.

### Quality Checklist

- [ ] File names follow `snake_case` convention.
- [ ] Folder names follow `snake_case` convention (including component folders).
- [ ] File extensions are correct for the content type.
- [ ] Imports and references are updated if file names changed.
- [ ] Test files use appropriate naming (`.spec.ts` or `.test.ts`).
- [ ] Index files are named correctly (`index.ts` or `index.tsx`).
- [ ] Framework-specific files follow their ecosystem conventions
