---
description: Use when writing or editing any markdown content including documentation files (.md, .mdx), Cursor rules (.mdc), JSDoc comments, README files, or any other markdown-formatted content. Essential for ensuring consistent formatting, accessibility compliance, and proper link syntax across all markdown files in the project.
globs:
alwaysApply: false
---
# Markdown Guidelines

This rule provides comprehensive guidelines for writing markdown content that follows best practices and passes markdown linting in this project.

## Table of Contents

- [Quick Reference](mdc:#quick-reference)
- [Configuration](mdc:#markdown-linting-configuration)
- [General Best Practices](mdc:#general-markdown-best-practices)
- [File Type Guidelines](mdc:#file-type-specific-guidelines)
- [Project-Specific Patterns](mdc:#project-specific-guidelines)
- [Language Identifiers](mdc:#language-identifiers)
- [Templates](mdc:#templates)
- [Common Mistakes](mdc:#common-mistakes)
- [Quality Checklist](mdc:#quality-checklist)

## Quick Reference

| Element              | Syntax           | Example               |
|----------------------|------------------|-----------------------|
| **Bold**             | `**text**`       | `**important**`       |
| *Italic*             | `*text*`         | `*emphasis*`          |
| `Code`               | `` `code` ``     | `` `function()` ``    |
| [Link](mdc:#links)                | `[text](mdc:url)`          | `[Docs](mdc:docs.md)`               |
| ![Image](mdc:#images)              | `![alt](mdc:src)`          | `![Logo](mdc:logo.png)`              |
| List                 | `- item`         | `- First item`        |
| Code Block           | ` ```lang`       | ` ```tsx`             |

## Markdown Linting Configuration

The project uses markdownlint with the following configuration:

- **Line length**: Disabled (no strict character limits)
- **Inline HTML**: Allowed (can use HTML when needed)
- **Heading start left**: Disabled (headings can be indented)
- **Duplicate headings**: Disabled (can have same heading text in different sections)

Reference: [.markdownlint-cli2.jsonc](mdc:.markdownlint-cli2.jsonc)

## General Markdown Best Practices

### Headings

- Use `#` for main title (H1)
- Use `##` for section headings (H2)
- Use `###` for subsection headings (H3)
- Use `####` for sub-subsection headings (H4)
- Avoid using more than 4 levels of headings
- Leave one blank line before and after headings
- Always include space after `#` characters

```md
# Main Title

## Section Heading

### Subsection Heading

#### Sub-subsection Heading
```

### Text Formatting

- Use **bold** for emphasis: `**text**`
- Use *italic* for secondary emphasis: `*text*`
- Use `code` for inline code: `` `code` ``
- Use ~~strikethrough~~ for deprecated content: `~~text~~`
- Don't overuse formatting - keep it meaningful

### Lists

- Use `-` for unordered lists (consistent throughout project)
- Use `1.` for ordered lists
- Indent sub-items with 2 spaces
- Leave blank line before and after lists
- Include space after bullet points and numbers
- **End list entries with a period when they are complete sentences**

```md
- First item
- Second item
  - Sub-item
  - Another sub-item
- Third item

1. First step
2. Second step
   1. Sub-step
   2. Another sub-step
3. Third step
```

**Examples of proper list formatting:**

```md
- Use descriptive link text that explains the destination.
- Include title attribute for accessibility when helpful.
- Avoid generic text like "click here" or "read more".

- Component name
- File path
- Configuration option
```

### Links

- Use descriptive link text that explains the destination
- Include title attribute for accessibility when helpful
- Avoid generic text like "click here" or "read more"
- Use proper syntax for different file types (see [File Type Guidelines](mdc:#file-type-specific-guidelines))

```md
[Component Documentation](mdc:component-docs.md)
[GitHub Repository](mdc:https:/github.com/org/repo "Visit our GitHub repository")
[API Reference](mdc:api-reference.md "Complete API documentation")
```

### Images

- Always include alt text for accessibility
- Use descriptive alt text that explains the image content
- Include title attribute when helpful
- Keep alt text concise but informative

```md
![Dashboard screenshot](mdc:dashboard.png)
![Component preview](mdc:component.png "Interactive component demonstration")
![User settings panel showing theme options](mdc:settings.png)
```

### Code Blocks

For comprehensive code block formatting guidelines, see [Code Block Guidelines](mdc:.cursor/rules/guidelines/code_block.mdc).

Key requirements:

- Always specify the language for syntax highlighting
- Prefer shorter language identifiers for consistency
- Use appropriate identifiers for different file types

Common examples:

```tsx
export const Component = () => {
  return <div>Hello World</div>
}
```

```sh
npm install package-name
```

```ts
function example() {
  return 'hello world'
}
```

```jsonc
{
  "name": "example",
  "version": "1.0.0"
}
```

### Blockquotes

- Use `>` for blockquotes
- Can be nested with multiple `>`
- Leave blank line before and after
- Include space after `>` character

```md
> This is a blockquote
>
> It can span multiple lines
>
>> This is a nested blockquote
```

### Tables

- Use proper table formatting with headers
- Align columns appropriately using `|---|` for left alignment
- Keep tables simple and readable
- Include proper spacing for readability
- **Adjust table width to content** - column widths should match the content rather than being artificially stretched

#### Basic Table Example

```md
| Header 1 | Header 2 | Header 3 |
|----------|----------|----------|
| Cell 1   | Cell 2   | Cell 3   |
| Cell 4   | Cell 5   | Cell 6   |
```

#### Width-Adjusted Table Example

When content varies in length, adjust column widths accordingly:

```md
| Short | Medium Length Header | Very Long Header With More Content                |
|-------|----------------------|---------------------------------------------------|
| A     | Some content here    | This cell contains much more detailed information |
| B     | Another row          | Additional data that spans multiple words here    |
| C     | Final entry          | Last row with comprehensive content description   |
```

### Horizontal Rules

- Use `---` for horizontal rules
- Leave blank lines before and after

```md
Content above

---

Content below
```

## File Type Specific Guidelines

### Regular Markdown Files (`*.md`, `*.mdx`)

- Use standard markdown link syntax: `[text](mdc:file.md)`
- Follow project-specific patterns for the content type
- Include proper frontmatter if required
- Use relative paths for local files

### Cursor Rule Files (`*.mdc`)

- Use `mdc:` prefix ONLY for local files that should be easily accessible when applying the rule
- Examples: templates, other rules, config files
- Use standard markdown syntax for external URLs
- Include integration section at the bottom
- Follow the same markdown standards as other files

**When to use `mdc:` prefix:**

```md
[Other Rule](mdc:.cursor/rules/other-rule.mdc)
[Template](mdc:.cursor/templates/example.md)
[Config File](mdc:package.json)
```

**When to use standard links:**

```md
[External Site](mdc:https:/example.com)
[Documentation](mdc:docs/README.md)
```

### Documentation Files

- Use consistent heading hierarchy
- Include table of contents for long documents
- Add proper navigation links
- Include examples and code snippets
- Follow accessibility best practices

## Project-Specific Guidelines

### Component Documentation

Follow the [Component Documentation Template](mdc:.cursor/templates/markdown/component_documentation.md):

- Use proper heading hierarchy
- Include usage examples with code blocks
- Document props and their types
- Include accessibility considerations
- Provide installation instructions
- Include related components section

### API Documentation

Follow the [API Documentation Template](mdc:.cursor/templates/markdown/api_documentation.md):

- Use consistent formatting for parameters
- Include type information
- Provide usage examples
- Document return values
- Include error handling
- Provide authentication details

### Changelog Entries

- Follow the existing changelog format
- Use appropriate change types (feat, fix, docs, etc.)
- Include breaking change notes when applicable
- Reference issues and PRs when relevant

## Language Identifiers

Use these shorter identifiers for consistency:

| Language           | Identifier | Notes                                                  |
| :----------------- | :--------- | :----------------------------------------------------- |
| Shell commands     | `sh`       | Preferred over `bash` for cross-platform compatibility |
| TypeScript React   | `tsx`      | For React components with TypeScript                   |
| TypeScript         | `ts`       | Preferred over `typescript` for brevity                |
| JavaScript         | `js`       | Preferred over `javascript` for consistency            |
| JSON with comments | `jsonc`    | Preferred over `json` when comments are needed         |
| Markdown           | `md`       | Preferred over `markdown` for brevity                  |
| CSS                | `css`      | Standard identifier for stylesheets                    |
| HTML               | `html`     | Standard identifier for markup                         |
| Python             | `python`   | Standard identifier for Python scripts                 |
| SQL                | `sql`      | Standard identifier for database queries               |

## Templates

Use these templates for consistent documentation:

- [Component Documentation](mdc:.cursor/templates/markdown/component_documentation.md) - For React components and libraries
- [API Documentation](mdc:.cursor/templates/markdown/api_documentation.md) - For REST APIs and web services

## Common Mistakes

See [Common Markdown Mistakes](mdc:.cursor/templates/markdown/common_mistakes.md) for examples of frequent errors and their corrections.

Key areas to watch:

- **Heading spacing**: Always include space after `#`
- **Link text**: Use descriptive text, not "click here"
- **Code blocks**: Always specify language
- **List formatting**: Consistent bullet style and spacing
- **Link syntax**: Use `mdc:` only for Cursor rule files
- **Table formatting**: Proper alignment and spacing

## Quality Checklist

Before submitting markdown content, ensure:

- [ ] All headings follow proper hierarchy (H1 → H2 → H3 → H4)
- [ ] Code blocks have language identifiers
- [ ] Links have descriptive text
- [ ] Images have meaningful alt text
- [ ] Lists are properly formatted with consistent bullets
- [ ] Tables are aligned correctly
- [ ] No broken links
- [ ] Consistent formatting throughout
- [ ] Proper use of emphasis and code formatting
- [ ] Accessibility considerations addressed
- [ ] Using shortest appropriate language identifiers
- [ ] Using `mdc:` prefix ONLY for Cursor rule files (*.mdc)
- [ ] Using standard markdown links for config files, regular markdown files, and external URLs
- [ ] File type appropriate link syntax used
- [ ] Proper spacing around headings, lists, and code blocks
- [ ] Meaningful code comments when needed

## Integration with Other Rules

This rule works in conjunction with:

- [Code Block Formatting](mdc:.cursor/rules/guidelines/code_block.mdc) - For consistent code block formatting
- [File Naming Conventions](mdc:.cursor/rules/guidelines/naming.mdc) - For consistent file naming
- [Generate Release Note](mdc:.cursor/rules/workflows/generate_release_note.mdc) - For changelog formatting
- [Cursor Rules](mdc:.cursor/rules/cursor_rules.mdc) - For rule-specific markdown standards
